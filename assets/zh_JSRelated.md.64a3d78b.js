import{_ as s,c as n,o as a,R as l}from"./chunks/framework.cfc4ba5e.js";const b=JSON.parse('{"title":"JSRelated","description":"","frontmatter":{},"headers":[{"level":2,"title":"BOM","slug":"bom","link":"#bom","children":[]},{"level":2,"title":"JS DOM 操作","slug":"js-dom-操作","link":"#js-dom-操作","children":[{"level":3,"title":"获取元素","slug":"获取元素","link":"#获取元素","children":[]},{"level":3,"title":"操作内容","slug":"操作内容","link":"#操作内容","children":[]},{"level":3,"title":"操作属性","slug":"操作属性","link":"#操作属性","children":[]},{"level":3,"title":"节点操作","slug":"节点操作","link":"#节点操作","children":[]}]},{"level":2,"title":"JS Cookie","slug":"js-cookie","link":"#js-cookie","children":[]},{"level":2,"title":"JS 运算符","slug":"js-运算符","link":"#js-运算符","children":[]},{"level":2,"title":"JS 事件","slug":"js-事件","link":"#js-事件","children":[]},{"level":2,"title":"JS 内置对象","slug":"js-内置对象","link":"#js-内置对象","children":[]},{"level":2,"title":"JS 继承","slug":"js-继承","link":"#js-继承","children":[]},{"level":2,"title":"JS 中的任务队列","slug":"js-中的任务队列","link":"#js-中的任务队列","children":[{"level":3,"title":"为什么 JavaScript 是单线程？","slug":"为什么-javascript-是单线程","link":"#为什么-javascript-是单线程","children":[]},{"level":3,"title":"什么是任务队列？","slug":"什么是任务队列","link":"#什么是任务队列","children":[]},{"level":3,"title":"什么是事件循环（EventLoop）？","slug":"什么是事件循环-eventloop","link":"#什么是事件循环-eventloop","children":[]}]},{"level":2,"title":"触摸事件","slug":"触摸事件","link":"#触摸事件","children":[{"level":3,"title":"点透问题，解决点透问题","slug":"点透问题-解决点透问题","link":"#点透问题-解决点透问题","children":[]}]},{"level":2,"title":"JS 交换两个变量的值","slug":"js-交换两个变量的值","link":"#js-交换两个变量的值","children":[{"level":3,"title":"通用变量","slug":"通用变量","link":"#通用变量","children":[]},{"level":3,"title":"1. 首先把 a 的值存储到临时变量中，然后 b 赋值给 a，最后拿出临时变量中的 a 值赋给 b","slug":"_1-首先把-a-的值存储到临时变量中-然后-b-赋值给-a-最后拿出临时变量中的-a-值赋给-b","link":"#_1-首先把-a-的值存储到临时变量中-然后-b-赋值给-a-最后拿出临时变量中的-a-值赋给-b","children":[]},{"level":3,"title":"2. 先改变另一个变量值， 最后改变原修改的变量值","slug":"_2-先改变另一个变量值-最后改变原修改的变量值","link":"#_2-先改变另一个变量值-最后改变原修改的变量值","children":[]},{"level":3,"title":"3. 通过底层位运算来进行交换变量值","slug":"_3-通过底层位运算来进行交换变量值","link":"#_3-通过底层位运算来进行交换变量值","children":[]},{"level":3,"title":"4. 把 a 先变成了一个对象，这个对象保存着应该交换后的键值对，最后赋值搞定","slug":"_4-把-a-先变成了一个对象-这个对象保存着应该交换后的键值对-最后赋值搞定","link":"#_4-把-a-先变成了一个对象-这个对象保存着应该交换后的键值对-最后赋值搞定","children":[]},{"level":3,"title":"5. 把 a 先变成了一个数组","slug":"_5-把-a-先变成了一个数组","link":"#_5-把-a-先变成了一个数组","children":[]},{"level":3,"title":"6","slug":"_6","link":"#_6","children":[]},{"level":3,"title":"7","slug":"_7","link":"#_7","children":[]},{"level":3,"title":"log h6 1~7","slug":"log-h6-1-7","link":"#log-h6-1-7","children":[]}]},{"level":2,"title":"JS 数组去重","slug":"js-数组去重","link":"#js-数组去重","children":[{"level":3,"title":"利用 ES6 Set 去重（ES6 中最常用）","slug":"利用-es6-set-去重-es6-中最常用","link":"#利用-es6-set-去重-es6-中最常用","children":[]},{"level":3,"title":"利用 for 嵌套 for，然后 splice 去重","slug":"利用-for-嵌套-for-然后-splice-去重","link":"#利用-for-嵌套-for-然后-splice-去重","children":[]},{"level":3,"title":"利用 indexOf 去重","slug":"利用-indexof-去重","link":"#利用-indexof-去重","children":[]},{"level":3,"title":"利用 sort()去重","slug":"利用-sort-去重","link":"#利用-sort-去重","children":[]},{"level":3,"title":"利用 hasOwnProperty[^所有的都去重了]","slug":"利用-hasownproperty-所有的都去重了","link":"#利用-hasownproperty-所有的都去重了","children":[]},{"level":3,"title":"利用 filter","slug":"利用-filter","link":"#利用-filter","children":[]},{"level":3,"title":"利用递归去重","slug":"利用递归去重","link":"#利用递归去重","children":[]},{"level":3,"title":"[...new Set(arr)]","slug":"new-set-arr","link":"#new-set-arr","children":[]},{"level":3,"title":"数组对象根据字段去重","slug":"数组对象根据字段去重","link":"#数组对象根据字段去重","children":[]}]},{"level":2,"title":"原生 AJAX 请求教程","slug":"原生-ajax-请求教程","link":"#原生-ajax-请求教程","children":[{"level":3,"title":"XMLHttpRequest 对象","slug":"xmlhttprequest-对象","link":"#xmlhttprequest-对象","children":[]},{"level":3,"title":"get 请求","slug":"get-请求","link":"#get-请求","children":[]},{"level":3,"title":"post 请求","slug":"post-请求","link":"#post-请求","children":[]},{"level":3,"title":"接受数据并处理数据","slug":"接受数据并处理数据","link":"#接受数据并处理数据","children":[]},{"level":3,"title":"完整实例","slug":"完整实例","link":"#完整实例","children":[]},{"level":3,"title":"封装原生 Ajax 请求","slug":"封装原生-ajax-请求","link":"#封装原生-ajax-请求","children":[]}]}],"relativePath":"zh/JSRelated.md","lastUpdated":1680248978000}'),p={name:"zh/JSRelated.md"},o=l(`<h1 id="jsrelated" tabindex="-1">JSRelated <a class="header-anchor" href="#jsrelated" aria-label="Permalink to &quot;JSRelated&quot;">​</a></h1><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h2><ol><li>BOM：<strong>浏览器对象模型 Browser Object Model</strong>，是 Javascript 的重要组成部分。它提供了一系列对象用于与浏览器窗口进行交互，这些对象通常统称为 BOM。</li><li>常见的 BOM 对象有哪些?</li></ol><table><thead><tr><th style="text-align:center;">对象</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">window</td><td style="text-align:center;">代表整个浏览器窗口（window 是 BOM 中的一个对象，并且是顶级的对象）</td></tr><tr><td style="text-align:center;">document</td><td style="text-align:center;">window 对象的一个属性，可以用来处理页面文档。</td></tr><tr><td style="text-align:center;">Navigator</td><td style="text-align:center;">代表浏览器当前的信息，通过 Navigator 我们可以获取用户当前使用的是什么浏览器</td></tr><tr><td style="text-align:center;">Location</td><td style="text-align:center;">代表浏览器当前的地址信息，通过 Location 我们可以获取或者设置当前的地址信息</td></tr><tr><td style="text-align:center;">History</td><td style="text-align:center;">代表浏览器的历史信息，通过 History 我们可以实现上一步/刷新/下一步操作</td></tr><tr><td style="text-align:center;">Screen</td><td style="text-align:center;">代表用户的屏幕信息</td></tr></tbody></table><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">//------1------</span></span>
<span class="line"><span style="color:#7B7F8B;">//window对象 --- 是JS的最顶层对象，其他的BOM对象都是window对象的属性。</span></span>
<span class="line"><span style="color:#7B7F8B;">//提供了独立于内容与浏览器窗口进行交互的对象，使用浏览器对象模型可以实现与HTML的交互。</span></span>
<span class="line"><span style="color:#7B7F8B;">//window.属性名 = &quot;属性值&quot;;</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">提示信息</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">confirm</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">确认信息</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">prompt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">弹出输入框</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">url地址</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">，</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">打开的方式（可以是-self或-black）</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">，</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">新窗口的大小</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">//关闭当前的网页。 注：存在兼容性问题</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">moveTo</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">//移动当前窗口(了解)注：存在兼容性问题</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">resizeTo</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">//调整当前窗口的尺寸</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(函数，时间) </span><span style="color:#7B7F8B;">//只执行一次</span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">setInterval</span><span style="color:#F6F6F4;">(函数，时间) </span><span style="color:#7B7F8B;">//无限执行</span></span>
<span class="line"><span style="color:#F6F6F4;">window.clearTimeout</span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">clearInterval</span><span style="color:#F6F6F4;">(定时器名称) </span><span style="color:#7B7F8B;">//清除定时器</span></span>
<span class="line"><span style="color:#7B7F8B;">//Window尺寸：有三种方法能够确定浏览器窗口的尺寸。</span></span>
<span class="line"><span style="color:#7B7F8B;">//对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</span></span>
<span class="line"><span style="color:#F6F6F4;">window.innerHeight</span><span style="color:#7B7F8B;">//浏览器窗口的内部高度(包括滚动条)，浏览器可视区域的高</span></span>
<span class="line"><span style="color:#F6F6F4;">window.innerWidth</span><span style="color:#7B7F8B;">//浏览器窗口的内部宽度(包括滚动条)，浏览器可视区域的宽</span></span>
<span class="line"><span style="color:#7B7F8B;">//对于 Internet Explorer 8、7、6、5：</span></span>
<span class="line"><span style="color:#F6F6F4;">document.documentElement.clientHeight</span></span>
<span class="line"><span style="color:#F6F6F4;">document.documentElement.clientWidth</span></span>
<span class="line"><span style="color:#7B7F8B;">//或者</span></span>
<span class="line"><span style="color:#F6F6F4;">document.body.clientHeight</span></span>
<span class="line"><span style="color:#F6F6F4;">document.body.clientWidth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//------2------</span></span>
<span class="line"><span style="color:#7B7F8B;">//document对象：文档对象。</span></span>
<span class="line"><span style="color:#7B7F8B;">//它是window对象的一个属性，可以用来处理页面文档。</span></span>
<span class="line"><span style="color:#F6F6F4;">document.attribute</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//------3------</span></span>
<span class="line"><span style="color:#7B7F8B;">//location对象：浏览器当前URL信息。</span></span>
<span class="line"><span style="color:#7B7F8B;">//对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。</span></span>
<span class="line"><span style="color:#F6F6F4;">window.location 对象在编写时可不使用 window 这个前缀。 一些例子：</span></span>
<span class="line"><span style="color:#F6F6F4;">location.herf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">url地址</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">location.hostname 返回 web 主机的域名</span></span>
<span class="line"><span style="color:#F6F6F4;">location.pathname 返回当前页面的路径和文件名</span></span>
<span class="line"><span style="color:#F6F6F4;">location.port 返回 web 主机的端口 （</span><span style="color:#BF9EEE;">80</span><span style="color:#F6F6F4;"> 或 </span><span style="color:#BF9EEE;">443</span><span style="color:#F6F6F4;">）</span></span>
<span class="line"><span style="color:#F6F6F4;">location.portocol 返回页面使用的web协议。 http:或https:</span></span>
<span class="line"><span style="color:#7B7F8B;">// 重要的API：</span></span>
<span class="line"><span style="color:#F6F6F4;">location.</span><span style="color:#62E884;">reload</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">location.</span><span style="color:#62E884;">assign</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">location.</span><span style="color:#62E884;">replace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//------4----</span></span>
<span class="line"><span style="color:#7B7F8B;">//Navigator对象：浏览器本身信息。</span></span>
<span class="line"><span style="color:#7B7F8B;">//window.navigator对象包含有关访问者浏览器的信息。在编写时可不使用 window 这个前缀。</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.platform</span><span style="color:#7B7F8B;">//操作系统类型</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.userAgent</span><span style="color:#7B7F8B;">//浏览器设定的User-Agent字符串(重要)。最常用的属性，用来完成浏览器判断</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.appCodeName</span><span style="color:#7B7F8B;">//浏览器代号</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.appName</span><span style="color:#7B7F8B;">//浏览器名称</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.appVersion</span><span style="color:#7B7F8B;">//浏览器版本</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.language</span><span style="color:#7B7F8B;">//浏览器设置的语言</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.systemLanguage</span><span style="color:#7B7F8B;">//浏览器系统语言</span></span>
<span class="line"><span style="color:#F6F6F4;">navigator.cookieEnabled</span><span style="color:#7B7F8B;">//浏览器是否启用了cookie</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//------5------</span></span>
<span class="line"><span style="color:#7B7F8B;">//screen对象：客户端屏幕信息。</span></span>
<span class="line"><span style="color:#F6F6F4;">screen.availWidth</span><span style="color:#7B7F8B;">//属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏。</span></span>
<span class="line"><span style="color:#F6F6F4;">screen.availHeight</span><span style="color:#7B7F8B;">//属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//------6------</span></span>
<span class="line"><span style="color:#7B7F8B;">//History对象：浏览器访问历史信息。</span></span>
<span class="line"><span style="color:#7B7F8B;">//window.history对象包含浏览器的历史。为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。</span></span>
<span class="line"><span style="color:#F6F6F4;">history.length</span><span style="color:#7B7F8B;">//属性返回浏览器历史列表中的 URL 数量。</span></span>
<span class="line"><span style="color:#F6F6F4;">history.</span><span style="color:#62E884;">back</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//加载历史列表中的前一个 URL。返回上一页。</span></span>
<span class="line"><span style="color:#F6F6F4;">history.</span><span style="color:#62E884;">forward</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//加载历史列表中的下一个 URL。返回下一页。</span></span>
<span class="line"><span style="color:#F6F6F4;">history.</span><span style="color:#62E884;">go</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//负数时返回上一页，正数时返回下一页，</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h2 id="js-dom-操作" tabindex="-1">JS DOM 操作 <a class="header-anchor" href="#js-dom-操作" aria-label="Permalink to &quot;JS DOM 操作&quot;">​</a></h2><h3 id="获取元素" tabindex="-1">获取元素 <a class="header-anchor" href="#获取元素" aria-label="Permalink to &quot;获取元素&quot;">​</a></h3><ol><li><p><code>getElementById</code>：返回元素节点</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">idName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//id名获取，单个id的定义不能重复</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>getElementsByClassName</code>：返回 HTMLCollection 对象（IE9 以下不支持）</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementsByClassName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">className</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//class名获取一组HTMLDom元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>getElementsByTagName</code>：返回 HTMLCollection 对象</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tagName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//标签名获取一组HTMLDom元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>getElementsByName</code>：返回 nodeList 对象,第 0 项为元素节点</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementsByName</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//获取一组带有指定name属性的对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>querySelector</code>：返回选择器匹配到的第一个元素节点</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">querySelector</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">#box em</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//选择器同css用法一致,支持由外到内的嵌套写法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>querySelectorAll</code>：返回 nodeList 对象（类似数组对象,每个值为选中元素节点)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">querySelectorAll</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//获取HTMLDom中匹配指定 CSS 选择器的所有元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>childNodes</code>：获取子元素集合（IE：只获取元素节点；非 IE：获取元素节点与文本节点；)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().childNodes; </span><span style="color:#7B7F8B;">//获取Id下的所有子元素集合</span></span>
<span class="line"><span style="color:#7B7F8B;">//childNodes：获取指定元素的子元素集合(包括HTML节点，所有属性，文本),可以通过nodeType来判断是哪种类型的节点，当nodeType==1时是元素节点，2是属性节点，3是文本节点(IE9/Firefox不支持childNodes(i))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>children</code>：获取指定元素的子元素节点集合（只获取元素节点，浏览器表现相同，Firefox 下不支持()取集合元素）</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().children;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>lastElementChild</code>：获取最后一个元素节点（IE&lt;9 不支持）</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().lastElementChild;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>firstElementChild</code>：获取第一个元素节点（IE&lt;9 不支持)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().firstElementChild;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>nextSibling</code>：获取后一个兄弟元素节点（IE&lt;9：后一个兄弟元素节点；非 IE6,7,8：后一个兄弟节点，文本节点或者元素节点)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().nextSibling;</span></span>
<span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().nextElementSibling;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>nextElementSibling</code>：（IE&lt;9 不支持）</p><p><code>nextSibling</code>属性返回元素节点之后的兄弟节点（包括文本节点、注释节点即回车、换行、空格、文本等等)；</p><p><code>nextElementSibling</code>属性只返回元素节点之后的兄弟元素节点（不包括文本节点、注释节点)；</p></li><li><p><code>previousSibling</code>：获取前一个兄弟元素节点（IE&lt;9 前一个兄弟元素节点；非 IE6,7,8：前一个兄弟节点，文本节点或者元素节点）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().previousSibling;</span></span>
<span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().previousElementSibling;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>previousElementSibling</code>：获取指定元素的前一个兄弟元素（相同节点树层中的前一个元素节点,IE&lt;9 不支持)</p><p><code>previousSibling</code>属性返回元素节点之前的兄弟节点（包括文本节点、注释节点）；</p><p><code>previousElementSibling</code>属性只返回元素节点之前的兄弟元素节点（不包括文本节点、注释节点）；</p></li><li><p><code>parentNode</code>：获取父元素节点（parentElement 用法一致,仅 IE 支持）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().parentNode;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>offsetParent</code>：获取第一个设置定位的上级元素,返回元素节点</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">().offsetParent);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><hr><h3 id="操作内容" tabindex="-1">操作内容 <a class="header-anchor" href="#操作内容" aria-label="Permalink to &quot;操作内容&quot;">​</a></h3><ul><li><p><strong><code>innerText</code></strong></p></li><li><p><code>outerHTML</code>：对元素自身的快速替换，比如:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">//&lt;p id=&quot;hello&quot;&gt;Hello, I am a demo&lt;/p&gt;</span></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).outerHTML </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&lt;p&gt;Hello, I am a replacement&lt;/p&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><code>documentFragment</code>：能实现高效率的 DOM 节点插入操作</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> docFragment </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createDocumentFragment</span><span style="color:#F6F6F4;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong><code>textContent</code></strong>：针对元素中的文本内容的操作，提取元素本身和其子元素中文本内容， 比如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">//&lt;div id=&quot;test&quot;&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">// &lt;p&gt;whatever, blah blah.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">// hello，I am a &lt;em&gt;Demo&lt;/em&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">//&lt;/div&gt;</span></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).textContent;</span></span>
<span class="line"><span style="color:#7B7F8B;">//whatever, blah blah.hello, I am a Demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>✔ 把文本直接连接起来。IE9+和其他浏览器都很好的支持此方法。</p></li></ul><hr><h3 id="操作属性" tabindex="-1">操作属性 <a class="header-anchor" href="#操作属性" aria-label="Permalink to &quot;操作属性&quot;">​</a></h3><ul><li><p>src 、href</p></li><li><p>title、alt 、id</p></li><li><p>表单标签属性：type、value、[checked、selected、disabled (boolean 类型的值)]</p></li><li><p>操作样式：style、className</p></li><li><p>attribute：</p><ol><li>getAttribute()（返回元素上一个指定的属性值）</li><li>setAttribute()（设置指定元素上的某个属性值。如果属性已经存在，则更新该值；否则，使用指定的名称和值添加一个新的属性）</li><li>removeAttribute()（获取某个属性当前的值）</li><li>attributes()（要删除某个属性）</li><li>dataset()（获取自定义属性值的使用（date-*自定义属性））</li></ol></li></ul><h3 id="节点操作" tabindex="-1">节点操作 <a class="header-anchor" href="#节点操作" aria-label="Permalink to &quot;节点操作&quot;">​</a></h3><ul><li><p>查找节点</p><ul><li>parentNode（父节点）</li><li>childNodes（子节点）</li><li>previousSibling（下一个同胞元素）</li><li>nextSibling（上一个同胞元素）</li><li>firstChild（第一个元素）</li><li>lastChild（最后一个元素）</li><li>元素节点： <ul><li>parentElement（父元素节点）</li><li>children</li><li>previousElementSibling（返回当前节点的前一个兄弟节点，无返回 null）</li><li>nextElementSibling（返回当前元素在其父元素的子元素节点中的后一个元素节点,如果该元素已经是最后一个元素节点，则返回 null）</li><li>firstElementChild（返回对象的第一个子元素，如果没有子元素，则为 null）</li><li>lastElementChild（返回对象的最后一个子元素， 如果没有子元素，则为 null）</li></ul></li></ul></li><li><p>新增</p><ul><li><strong>createElement（）标签节点</strong></li><li>createTextNode（）文本节点</li><li>createAttribute（）设置标签属性</li><li>**appendChild()**添加节点（末尾）</li><li>**inserBefore()**在参考节点之前插入一个拥有指定父节点的子节点。</li><li>append() 如果新增元素是从页面获取的，那么会执行移动 操作，而不是复制</li><li>cloneNode() 克隆节点</li></ul></li><li><p>删除</p><p>**remove()**删除元素本身及所有子内容</p><p>**removeChild()**保留当前容器，删除所有子内容</p></li><li><p>修改</p><p>**replaceChild()**替换节点</p></li></ul><h2 id="js-cookie" tabindex="-1">JS Cookie <a class="header-anchor" href="#js-cookie" aria-label="Permalink to &quot;JS Cookie&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td>cookie 的 key 值</td><td>&#39;id=sjjdjdd&#39;</td></tr><tr><td style="text-align:left;">expires</td><td>到期时间</td><td>&#39;expires=21 Oct 2015 07:28:00 GMT&#39;</td></tr><tr><td style="text-align:left;">domin</td><td>cookie 生效的域</td><td>&#39;domin=im.baidu.com&#39;</td></tr><tr><td style="text-align:left;">path</td><td>cookie 生效的路径</td><td>&#39;path=/&#39;</td></tr><tr><td style="text-align:left;">secure</td><td>是否在 https 下生效</td><td>&#39;secure&#39;</td></tr><tr><td style="text-align:left;">httponly</td><td>是否允许 JS 获取</td><td>&#39;httponly&#39;</td></tr><tr><td style="text-align:left;">max-age</td><td>以秒为单位设置过期时间(IE678 不生效)</td><td>&#39;31536000&#39;</td></tr></tbody></table><ol><li><p>创建 cookie :</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// 创建 cookie</span></span>
<span class="line"><span style="color:#F6F6F4;">document.cookie </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username=John Doe</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除</span></span>
<span class="line"><span style="color:#F6F6F4;">document.cookie </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面</span></span>
<span class="line"><span style="color:#F6F6F4;">document.cookie </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>修改 cookie：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// cookie 的 name 属性是唯一的，重新创建一样的 name 属性值可做到修改</span></span>
<span class="line"><span style="color:#F6F6F4;">document.cookie </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username=John Smith; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>删除 Cookie：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// 设置 expires 参数为以前的时间，到期将被删除，name 的属性值可不写</span></span>
<span class="line"><span style="color:#F6F6F4;">document.cookie </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username=; expires=Thu, 01 Jan 1970 00:00:00 GMT</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>一个小方法：toGMTString()</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// 当前的时间</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(data); </span><span style="color:#7B7F8B;">// Sat Oct 16 2021 14:44:41 GMT+0800 (中国标准时间)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(data.</span><span style="color:#62E884;">toGMTString</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">//Sat, 16 Oct 2021 06:44:41 GMT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>总结</strong>：toGMTString() 方法可根据格林威治时间 (GMT) 把 Date 对象转换为字符串，并返回结果。</p></li><li><p>设置 cookie 属性按照表格的顺序写</p></li><li><p>会话 cookie：如果 cookie 不包含到期日期，则可视为会话 cookie。 会话 cookie 存储在内存中，决不会写入磁盘。 当浏览器关闭时，cookie 将从此永久丢失</p><p>持久性 cookie: 如果 cookie 包含到期日期，则可视为持久性 cookie。 在指定的到期日期，cookie 将从磁盘中删除。</p></li><li><p>cookie 的优点： 对数据安全性要求不高。 跨页面共享数据。 存储空间约 4kb 左右</p><p>cookie 的缺点 1）cookie 可能被禁用； 2）cookie 与浏览器相关，不能互相访问；（cookie 跨域可以实现，存储安全性风险） 3）cookie 可能被用户删除； 4）cookie 安全性不够高； 5）cookie 存储空间很小，大约 4kb 左右。</p></li></ol><h2 id="js-运算符" tabindex="-1">JS 运算符 <a class="header-anchor" href="#js-运算符" aria-label="Permalink to &quot;JS 运算符&quot;">​</a></h2><ul><li>赋值运算符： = += -= *= /= %=</li><li>算数运算符： + - * / % ++ --</li><li>比较运算符： &gt; &lt; &gt;= &lt;= == === != !==</li><li>逻辑运算符： &amp;&amp; || !</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// 多个表达式是 &quot;&amp;&amp;&quot; 连接，这些表达式必须同时成立，才会返回true;否则返回false</span></span>
<span class="line"><span style="color:#7B7F8B;">// 多个表达式是 &quot;||&quot; 连接，这些表达式中有一个成立，则返回true;如所有表达式都不成立,返回false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="js-事件" tabindex="-1">JS 事件 <a class="header-anchor" href="#js-事件" aria-label="Permalink to &quot;JS 事件&quot;">​</a></h2><ul><li><p>事件的三要素：</p><ol><li><strong>事件源</strong> 事件被触发的对象 谁被触发</li><li><strong>事件类型</strong> 如何触发 什么事件 比如鼠标点击（onclick），鼠标经过，键盘按下</li><li><strong>事件处理程序</strong> 通过 一个函数赋值的方式 完成</li></ol></li><li><p>常用事件类型：鼠标、键盘、表单、change</p></li><li><p>form 的 formData</p></li><li><p>事件对象 event 兼容性写法</p><ul><li><p><strong><code>Event 对象</code>代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态</strong>。事件通常与函数结合使用，函数不会在事件发生前被执行！</p><p>当一个事件发生的时候，和当前这个对象发生的这个事件有关的一些详细信息（包括导致事件的元素、事件的类型、以及其它与特定事件相关的信息等。这个对象是在执行事件时，浏览器通过函数传递过来的。）都会被临时保存到一个指定的地方——event 对象，供我们在需要的时候调用.</p></li></ul></li><li><p>事件流 阻止冒泡——兼容性写法</p><ul><li><p><strong>防止冒泡和捕获：w3c 的方法是 e.stopPropagation()，IE 则是使用 e.cancelBubble = true</strong></p><p>stopPropagation 也是事件对象(Event)的一个方法，作用是阻止目标元素的冒泡事件，但是会不阻止默认行为。什么是冒泡事件？如在一个按钮是绑定一个”click”事件，那么”click”事件会依次在它的父级元素中被触发 。stopPropagation 就是阻止目标元素的事件冒泡到父级元素</p></li></ul></li><li><p>阻止默认行为 兼容性写法：return false</p><ul><li><p>JavaScript 的**<code>return false</code>**只会阻止默认行为，而是用 jQuery 的话则既阻止默认行为又防止对象冒泡。</p></li><li><p><strong>取消默认事件：w3c 的方法是 e.preventDefault()，IE 则是使用 e.returnValue = false;</strong></p><p>preventDefault 它是事件对象(Event)的一个方法，作用是取消一个目标元素的默认行为。什么元素有默认行为呢？如链接&lt;a&gt;，提交按钮&lt;input type=&quot;submit&quot;&gt;等。</p></li></ul></li><li><p>事件委托：将多个子元素的相同事件，绑定给页面上现存的共同的父元素 利用事件冒泡触发父元素的事件，利用事件目标找到真正点击的元素</p></li><li><p>鼠标事件：</p><ul><li><p>元素的 onclick 标签属性</p></li><li><p>页面 js 对象.onclick=function(){}</p></li><li><p>addEventListener() 方法 【官方推荐】removeEventListener 移除</p></li><li><p>ie9 之前 attachEvent() detachEvent()移除</p></li><li><p>鼠标事件：</p><ul><li>click</li><li>dblclick 短时双击同一个元素触发</li><li>mouseover/out 鼠标移入/移出</li><li>mouseenter/leave 鼠标移进/离开</li><li>mousedown/up 鼠标按下/释放</li><li>mousemove 鼠标移动</li><li>右键：contextmenu</li></ul></li></ul></li><li><p>键盘事件：</p><ul><li>keydown 按键向下按的时候触发</li><li>keyup 按键回弹的时候触发</li><li>keypress 按键触底的时候触发</li></ul></li><li><p>表单事件：</p><ul><li>失去焦点 blur</li><li>获取焦点 focus</li><li>submit 提交事件</li><li>change 数据发生改变会触发的事件</li></ul></li><li><p>拖拽事件</p><ul><li>ondragstart 开始拖拽</li><li>ondrag 正在拖拽,仅在窗口内有效</li><li>ondragend 结束拖拽</li><li>以上三个事件绑定的是被拖拽的元素</li><li>以下三个事件绑定的是元素拖拽的范围</li><li>ondragenter 有一个标签被拖入到事件范围内</li><li>ondragover 有一个标签在事件范围内,持续触发事件</li><li>ondragleave 有一个标签被拖出了事件范围</li></ul></li></ul><p>总结：</p><p>防止冒泡和捕获：w3c 的方法是 e.stopPropagation()，IE 则是使用 e.cancelBubble = true**</p><p>阻止默认行为：return false</p><p>取消默认事件：w3c 的方法是 e.preventDefault()，IE 则是使用 e.returnValue = false;</p><h2 id="js-内置对象" tabindex="-1">JS 内置对象 <a class="header-anchor" href="#js-内置对象" aria-label="Permalink to &quot;JS 内置对象&quot;">​</a></h2><ul><li><p><strong>Math：用于 number 类型。</strong></p><ul><li>Math.PI（圆周率，一个圆的周长和直径之比，约等于 <code>3.14159</code>）</li><li>Math.E（欧拉常数，也是自然对数的底数，约等于 <code>2.718</code>）</li><li>Math.random()（返回一个 0 到 1 之间的伪随机数）</li><li>Math.max()（返回零到多个数值中最大值）</li><li>Math.min()（返回零到多个数值中最小值）</li><li>Math.pow(x, y)（返回一个数的 y 次幂）</li><li>Math.floor(x)（返回小于一个数的最大整数，即一个数向下取整后的值）</li></ul></li><li><p><strong>date：</strong></p><ul><li>new Date()（实例化一个<code>Date</code>对象）</li><li>getDate（返回一个 1 到 31 的整数值。）</li><li>getDay（根据本地时间，返回具体日期中一周的第几天，0 表示星期天。）</li><li>getMouth（返回表示月份的数字，。一月为 0, 二月为 1, 以此类推。）</li><li>...（更多详情<code>MDN</code>）</li></ul></li><li><p>Array（<strong><code>Array</code></strong> 对象是用于构造数组的全局对象，数组是类似于列表的高阶对象。）</p><ul><li>常用的数组方法：</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> fruits </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Apple</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Banana</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]; </span><span style="color:#7B7F8B;">//创建数组</span></span>
<span class="line"><span style="color:#F6F6F4;">fruits.</span><span style="color:#62E884;">isArray</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//确定传递的值是否是一个Array，返回值为true或false。</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(fruits.length); </span><span style="color:#7B7F8B;">//打印数组长度</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits[fruits.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]; </span><span style="color:#7B7F8B;">//通过索引访问数组元素最后一个元素</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]; </span><span style="color:#7B7F8B;">//通过索引访问数组元素第一个元素</span></span>
<span class="line"><span style="color:#F6F6F4;">fruits.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">array</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(item, index);</span></span>
<span class="line"><span style="color:#F6F6F4;">}); </span><span style="color:#7B7F8B;">//遍历数组</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> newLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Orange</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//添加元素到数组的末尾</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits.</span><span style="color:#62E884;">pop</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//删除数组末尾的元素</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits.</span><span style="color:#62E884;">shift</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//删除数组头部元素</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> newLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits.</span><span style="color:#62E884;">unshift</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Strawberry</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//添加元素到数组的头部</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> pos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Banana</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//找出某个元素在数组中的索引</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> removedItem </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits.</span><span style="color:#62E884;">splice</span><span style="color:#F6F6F4;">(pos, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//通过索引删除某个元素</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> shallowCopy </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fruits.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//复制一个数组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>数组的索引是从 0 开始的，第一个元素的索引为 0，最后一个元素的索引等于该数组的 length-1</li><li>如果指定的索引是一个无效值，JavaScript 数组并不会报错，而是会返回 undefined</li><li>抛出 SyntaxError 异常的原因是使用了非法的属性名</li><li>在 JavaScript 中，数组对象名以数字开头的属性不能用点号引用，必须用方括号</li><li><code>includes()</code>方法判断一个数组是否包含一个指定的值，返回值为 true 或 false</li><li><code>concat()</code>用于合并两个或多个数组并返回一个新数组</li><li><code>copyWithin()</code>浅复制数组的一部分到同一数组中的另一个位置，并返回到新数组</li><li><code>every()</code>测试一个数组内的所有元素是否都能通过某个指定函数的测试,返回一个布尔值</li><li><code>fill()</code>用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</li><li><code>filter()</code>通过所提供函数实现的测试的所有元素,返回到一个新数组</li><li><code>find()</code>返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined</li><li><code>findIndex()</code>返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1</li><li><code>indexOf()</code>返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1</li><li><code>flat()</code>按照一个可指定的深度递归遍历数组，将所有元素与遍历到的子数组中的元素合并为新数组返回</li><li><code>forEach()</code>对数组的每个元素执行一次给定的函数</li><li><code>join()</code>将一个数组的所有元素连接成一个字符串并返回这个字符串</li><li><code>lastIndexOf()</code>返回指定元素在数组中的最后一个的索引，如果不存在则返回 <code>-1</code></li><li><code>map()</code>数组中的每个元素调用一次提供的函数后，返回到新数组里</li><li><code>pop()</code>从数组中**<code>删除最后一个</code>**元素[返回该元素的值 or 打印数组]</li><li><code>push()</code>将一个或多个元素**<code>添加</code><strong>到数组</strong><code>的末尾</code>**[返回该数组的新长度 or 打印数组]</li><li><code>reduce()</code>对数组中的每个元素执行一次 reducer 函数（升序执行），返回一个值</li><li><code>reverse()</code>**<code>颠倒数组</code>**元素的位置，返回该数组。<strong>该方法会改变原数组</strong></li><li><code>shift()</code>从数组中删除**<code>第一个</code>**元素[返回该元素的值 or 打印数组]</li><li><code>slice()</code>提取源数组的一部分并返回一个新数组</li><li><code>some()</code>测试数组中是不是至少有一个元素通过了被提供的函数测试，返回值为 true 或 false</li><li><code>sort()</code>对数组元素进行原地排序并返回此数组，<strong><code>默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</code></strong></li><li><code>splice()</code>通过删除或替换现有元素或者原地添加新的元素来修改数组，返回被修改的内容到数组</li><li><code>toString()</code>将数组内容转化为字符串</li><li><code>toLocaleString()</code>将数组内容转化为字符串</li><li><code>unshift()</code>将一个或多个元素添加到数组的头部[返回该数组的新长度 or 打印数组]</li></ul></li><li><p><strong>String</strong></p><ul><li><p><code>trim()</code> 方法返回一个从两头去掉空白字符的字符串，并不影响原字符串本身。</p></li><li><p><code>replace()</code> 方法返回一个由替换值（<code>replacement</code>）替换部分或所有的模式（<code>pattern</code>）匹配项后的新字符串。</p></li><li><p><code>startsWith()</code> 方法判断当前字符串是否以另外一个给定的子字符串**<code>开头</code>**，并根据判断结果返回 <code>true</code> 或 <code>false</code>。</p></li><li><p><code>endsWith()</code>方法判断当前字符串是否是以另外一个给定的子字符串**<code>结尾</code>**的，根据判断结果返回 <code>true</code> 或 <code>false</code>。</p></li><li><p><code>includes()</code> 方法判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p></li><li><p>转义字符：</p><table><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\\0</code></td><td>空字符</td></tr><tr><td><code>\\&#39;</code></td><td>单引号</td></tr><tr><td><code>\\&quot;</code></td><td>双引号</td></tr><tr><td><code>\\\\</code></td><td>反斜杠</td></tr><tr><td><code>\\n</code></td><td>换行</td></tr><tr><td><code>\\r</code></td><td><code>回车</code></td></tr><tr><td><code>\\v</code></td><td>垂直制表符</td></tr><tr><td><code>\\t</code></td><td>水平制表符</td></tr><tr><td><code>\\b</code></td><td>退格</td></tr><tr><td><code>\\f</code></td><td>换页</td></tr></tbody></table></li></ul></li></ul><h2 id="js-继承" tabindex="-1">JS 继承 <a class="header-anchor" href="#js-继承" aria-label="Permalink to &quot;JS 继承&quot;">​</a></h2><ol><li><p>call 继承</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">Father.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>原型链继承</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Father</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype.constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Child;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>组合</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">Father.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Father</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype.constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Child;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>寄生组合继承</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">Father.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 用来寄托父财产</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Super</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 将原型指向父实例对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Super</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Father</span><span style="color:#F6F6F4;">.prototype;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Super</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype.constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Child;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>新版</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// 原型继承：只能继承原型上的属性和方法，无法继承父类构造函数中属性和方法。</span></span>
<span class="line"><span style="color:#7B7F8B;">// 用父类的原型创建一个“临时对象”，目的：让子类的原型和父类的原型“脱钩”</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Object.</span><span style="color:#62E884;">create</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Father</span><span style="color:#F6F6F4;">.prototype);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 纠正子类的构造函数属性constructor指向，应该指向它自己。</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Child</span><span style="color:#F6F6F4;">.prototype.constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Child;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>案例：</p></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// 父类</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">sum</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name);</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 给构造函数添加了原型属性</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">.prototype.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 1.原型链继承</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Per</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ker</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Per</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 主要</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Per</span><span style="color:#F6F6F4;">.prototype.constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Per; </span><span style="color:#7B7F8B;">// 主要</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> per1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Per</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(per1.age); </span><span style="color:#7B7F8B;">// 10</span></span>
<span class="line"><span style="color:#7B7F8B;">// instanceof 判断元素是否在另一个元素的原型链上   &lt;!-- instanecof --&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">// per1 继承Person的属性。返回true</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(per1 </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 2.借用构造函数继承</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Con</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  Person.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">jer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 重点</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">12</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> con1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Con</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(con1.name); </span><span style="color:#7B7F8B;">// &quot;jer&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(con1.age); </span><span style="color:#7B7F8B;">// 12</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(con1 </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 3.组合继承（组合原型链继承和构造函数继承（call继承）） （常用）</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SubType</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  Person.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, name); </span><span style="color:#7B7F8B;">// 借用构造函数模式</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">SubType</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 原型链继承</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sub </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SubType</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(sub.name); </span><span style="color:#7B7F8B;">// &quot;gar&quot;继承了构造函数属性</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(sub.age); </span><span style="color:#7B7F8B;">// 10继承了父类原型属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 4.原型式继承</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">content</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">F</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">F</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj; </span><span style="color:#7B7F8B;">// 继承了传入的参数</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">F</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 返回函数对象</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 拿到父类的实例</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sup1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">content</span><span style="color:#F6F6F4;">(sup);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(sup1.age); </span><span style="color:#7B7F8B;">// 10继承了父类函数的属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 5.寄生式继承</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">content</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">F</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">F</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj; </span><span style="color:#7B7F8B;">// 继承了传入的参数</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">F</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 返回函数对象</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 拿到父类的实例</span></span>
<span class="line"><span style="color:#7B7F8B;">// 以上是原型式继承，给原型式继承再套个壳子传递参数</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">subobject</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sub </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">content</span><span style="color:#F6F6F4;">(obj);</span></span>
<span class="line"><span style="color:#F6F6F4;">  sub.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> sub;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sup2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">subobject</span><span style="color:#F6F6F4;">(sup);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 这个函数经过声明后就成了可增添属性的对象</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> subobject); </span><span style="color:#7B7F8B;">// function</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> sup2); </span><span style="color:#7B7F8B;">// object</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(sup2.name); </span><span style="color:#7B7F8B;">// &quot;gar&quot;,返回了个sub对象,继承了sub的属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 6.寄生组合式继承 （常用）</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">content</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">F</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">F</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj; </span><span style="color:#7B7F8B;">// 继承了传入的参数</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">F</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 返回函数对象</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// content就是F实例的另一种表示法</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> con </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">content</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">.prototype);</span></span>
<span class="line"><span style="color:#7B7F8B;">// con实例（F实例）的原型继承了父类函数的原型</span></span>
<span class="line"><span style="color:#7B7F8B;">// 上述更像是原型链继承，只不过是继承了原型属性</span></span>
<span class="line"><span style="color:#7B7F8B;">// 组合</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Sub</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  Person.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 这个继承了父类构造函数的属性</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#7B7F8B;">// 解决了组合式两次调用构造函数属性的特点</span></span>
<span class="line"><span style="color:#7B7F8B;">// 重点</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Sub</span><span style="color:#F6F6F4;">.prototype </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> con; </span><span style="color:#7B7F8B;">// 继承了con实例</span></span>
<span class="line"><span style="color:#F6F6F4;">con.constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Sub; </span><span style="color:#7B7F8B;">// 修复实例</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sub1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Sub</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// Sub的实例就继承了构造函数属性，父类实例，con的函数属性</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(sub1.age); </span><span style="color:#7B7F8B;">// 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br></div></div><h2 id="js-中的任务队列" tabindex="-1">JS 中的任务队列 <a class="header-anchor" href="#js-中的任务队列" aria-label="Permalink to &quot;JS 中的任务队列&quot;">​</a></h2><h3 id="为什么-javascript-是单线程" tabindex="-1">为什么 JavaScript 是单线程？ <a class="header-anchor" href="#为什么-javascript-是单线程" aria-label="Permalink to &quot;为什么 JavaScript 是单线程？&quot;">​</a></h3><ul><li>防止 DOM 渲染冲突的问题；</li><li>Html5 中的 Web Worker 可以实现多线程</li></ul><h3 id="什么是任务队列" tabindex="-1">什么是任务队列？ <a class="header-anchor" href="#什么是任务队列" aria-label="Permalink to &quot;什么是任务队列？&quot;">​</a></h3><blockquote><p>任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。</p></blockquote><h4 id="同步和异步任务" tabindex="-1">同步和异步任务 <a class="header-anchor" href="#同步和异步任务" aria-label="Permalink to &quot;同步和异步任务&quot;">​</a></h4><ol><li>同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</li><li>异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</li></ol><h4 id="执行流程" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程" aria-label="Permalink to &quot;执行流程&quot;">​</a></h4><ol><li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</li><li>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</li><li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li><li>主线程不断重复上面的第三步。</li></ol><h3 id="什么是事件循环-eventloop" tabindex="-1">什么是事件循环（EventLoop）？ <a class="header-anchor" href="#什么是事件循环-eventloop" aria-label="Permalink to &quot;什么是事件循环（EventLoop）？&quot;">​</a></h3><blockquote><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop（事件循环）。</p></blockquote><p>Event Loop 线程处理的任务被分为两类即 微任务（micro task）和宏任务（macro task） ，这两个任务分别维护一个队列，都是采用先进先出的策略进行执行。</p><p>宏任务：setTimeout、setInterval、I/O。</p><p>微任务：Promise.then、 MutationObserver。</p><p>当前栈执行完后，Event Loop 线程首先会执行微任务队列中事件，然后执行宏任务队列的事件，如果这时发现了微任务，则执行微任务，然后执行宏任务，反复循环至所有事件执行完毕。<strong>微任务永远在宏任务之前执行。</strong></p><ol><li>JavaScript 的所有代码都在主线程执行，形成一个执行栈.</li><li>主线程以外，还存在着一个任务队列，只要有了异步代码，就在任务队列放置一个事件.</li><li>一旦执行栈所有的同步任务执行完毕以后，系统就会去读取任务队列，对应的异步任务就会结束等待的状态，进入执行栈，开始执行</li><li>最先执行的是同步任务，执行完毕后，立即出栈，让出主线程。然后开始执行任务队列中的异步任务</li><li>任务队列：存在着两个队列，一个是宏任务队列，一个是微任务队列（ 异步任务分为宏任务和微任务 ）</li><li>JavaScript 代码的执行顺序： 同步任务 -&gt; 微任务 -&gt; 宏任务</li><li>Promise 本身是同步任务，它的 then catch finally 是异步任务。</li><li>定时器属于宏任务</li></ol><h2 id="触摸事件" tabindex="-1">触摸事件 <a class="header-anchor" href="#触摸事件" aria-label="Permalink to &quot;触摸事件&quot;">​</a></h2><ul><li><p><a href="./点透问题，解决点透问题">点透问题，解决点透问题</a></p></li><li><p>touchstart ：用户开始触摸时触发</p></li><li><p>touchend ：用户不再接触触摸屏时（或者移出屏幕边缘时）触发</p></li><li><p>touchmove ：用户移动触摸点时触发，触摸的半径、角度、力度发生变化，也会触发该事件。</p></li><li><p>touchcancel ：触摸点取消时触发，比如在触摸区域跳出一个模态窗口（modal window）、触摸</p></li></ul><p>点离开了文档区域（进入浏览器菜单栏）、用户的触摸点太多，超过了支持的上限（自动取消早先</p><p>的触摸点）。</p><p>触摸事件的 <code>e.touches</code> 、 <code>e.changedTouches</code> 、 <code>e.targetTouches</code> 这几个属性获取 TouchList，表示</p><p>一组触摸点的集合</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">clientX: </span><span style="color:#BF9EEE;">65</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点在浏览器窗口中的横坐标</span></span>
<span class="line"><span style="color:#F6F6F4;">clientY: </span><span style="color:#BF9EEE;">18</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点在浏览器窗口中的纵坐标</span></span>
<span class="line"><span style="color:#F6F6F4;">force: </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点压力大小</span></span>
<span class="line"><span style="color:#F6F6F4;">identifier: </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点唯一标识（ID）</span></span>
<span class="line"><span style="color:#F6F6F4;">pageX: </span><span style="color:#BF9EEE;">65</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点在页面中的横坐标</span></span>
<span class="line"><span style="color:#F6F6F4;">pageY: </span><span style="color:#BF9EEE;">18</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点在页面中的纵坐标</span></span>
<span class="line"><span style="color:#F6F6F4;">radiusX: </span><span style="color:#BF9EEE;">11.5</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点椭圆的水平半径</span></span>
<span class="line"><span style="color:#F6F6F4;">radiusY: </span><span style="color:#BF9EEE;">11.5</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点椭圆的垂直半径</span></span>
<span class="line"><span style="color:#F6F6F4;">rotationAngle: </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 旋转角度</span></span>
<span class="line"><span style="color:#F6F6F4;">screenX: </span><span style="color:#BF9EEE;">560</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点在屏幕中的横坐标</span></span>
<span class="line"><span style="color:#F6F6F4;">screenY: </span><span style="color:#BF9EEE;">175</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 触摸点在屏幕中的纵坐标</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="点透问题-解决点透问题" tabindex="-1">点透问题，解决点透问题 <a class="header-anchor" href="#点透问题-解决点透问题" aria-label="Permalink to &quot;点透问题，解决点透问题&quot;">​</a></h3><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><p>解决方案：</p><ol><li><p>禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉 300ms 的点击延迟。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">viewport</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">content</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user-scalable=no</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>利用 touch 事件自己封装这个事件解决 300ms 延迟。</p><p>原理就是：</p><ol><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li>如果时间小于 150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li></ol><p>代码如下:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">//封装tap，解决click 300ms 延时</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tap</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> isMove </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 记录触摸时候的时间变量</span></span>
<span class="line"><span style="color:#F6F6F4;">  obj.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">touchstart</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Date.</span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 记录触摸时间</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"><span style="color:#F6F6F4;">  obj.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">touchmove</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    isMove </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 看看是否有滑动，有滑动算拖拽，不算点击</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"><span style="color:#F6F6F4;">  obj.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">touchend</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 如果手指触摸和离开 时间小于150ms 算点击</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">isMove </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> Date.</span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> startTime </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">150</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      callback </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">callback</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 执行回调函数</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    isMove </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 取反 重置</span></span>
<span class="line"><span style="color:#F6F6F4;">    startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#7B7F8B;">//调用</span></span>
<span class="line"><span style="color:#62E884;">tap</span><span style="color:#F6F6F4;">(div, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 执行代码</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li><li><p>使用插件。fastclick 插件解决 300ms 延迟。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;"> 没有嵌套关系时，使用fastClick.js或者zepto.js </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.https://cdn.bootcdn.net/ajax/libs/fastclick/1.0.6/fastclick.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    // winodw.onload = function()</span><span style="color:#F286C4;">{}</span></span>
<span class="line"><span style="color:#F6F6F4;">    window.addEventListener(&quot;load&quot;, function () </span><span style="color:#F286C4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">     FastClick.</span><span style="color:#62E884;">attach</span><span style="color:#F6F6F4;">(document.body);</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">}</span><span style="color:#F6F6F4;">, false);</span></span>
<span class="line"><span style="color:#F6F6F4;"> var b = document.getElementById(&#39;b&#39;);</span></span>
<span class="line"><span style="color:#F6F6F4;"> var a = document.getElementById(&#39;a&#39;);</span></span>
<span class="line"><span style="color:#F6F6F4;"> b.ontouchstart = function () </span><span style="color:#F286C4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">关闭b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.style.display </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">none</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;"> a.onclick = function () </span><span style="color:#F286C4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a被点击！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;"> /**</span></span>
<span class="line"><span style="color:#F6F6F4;"> zepto.js</span></span>
<span class="line"><span style="color:#F6F6F4;">    tap 轻击</span></span>
<span class="line"><span style="color:#F6F6F4;">    singleTap 单击</span></span>
<span class="line"><span style="color:#F6F6F4;">    doubleTap 双击</span></span>
<span class="line"><span style="color:#F6F6F4;">    longTap 长摁</span></span>
<span class="line"><span style="color:#F6F6F4;">    */</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li><p><strong>封装 tab</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> TOUCHSTART, TOUCHEND;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> window.ontouchstart </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">undefined</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHSTART </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">touchstart</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHEND </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">touchend</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHMOVE </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">touchmove</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> window.onmspointerdown </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">undefined</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHSTART </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">MSPointerDown</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHEND </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">MSPointerUp</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHMOVE </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">MSPointerMove</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHSTART </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">mousedown</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHEND </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">mouseup</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    TOUCHMOVE </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">mousemove</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NodeTouch</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">._node </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> node;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tap</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">scope</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    node.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(TOUCHSTART, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.touches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageX;</span></span>
<span class="line"><span style="color:#F6F6F4;">      y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.touches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageY;</span></span>
<span class="line"><span style="color:#F6F6F4;">    });</span></span>
<span class="line"><span style="color:#F6F6F4;">    node.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(TOUCHEND, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      e.</span><span style="color:#62E884;">stopPropagation</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      e.</span><span style="color:#62E884;">preventDefault</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> curx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.changedTouches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageX;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> cury </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.changedTouches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageY;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Math.</span><span style="color:#62E884;">abs</span><span style="color:#F6F6F4;">(curx </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> x) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">abs</span><span style="color:#F6F6F4;">(cury </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> y) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        callback.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(scope, </span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    });</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">longTap</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">scope</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x,</span></span>
<span class="line"><span style="color:#F6F6F4;">      y,</span></span>
<span class="line"><span style="color:#F6F6F4;">      startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      endTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      in_dis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    node.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(TOUCHSTART, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.touches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageX;</span></span>
<span class="line"><span style="color:#F6F6F4;">      y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.touches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageY;</span></span>
<span class="line"><span style="color:#F6F6F4;">      startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getTime</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    });</span></span>
<span class="line"><span style="color:#F6F6F4;">    node.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(TOUCHEND, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      e.</span><span style="color:#62E884;">stopPropagation</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      e.</span><span style="color:#62E884;">preventDefault</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> curx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.changedTouches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageX;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> cury </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.changedTouches[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].pageY;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Math.</span><span style="color:#62E884;">abs</span><span style="color:#F6F6F4;">(curx </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> x) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">abs</span><span style="color:#F6F6F4;">(cury </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> y) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        in_dis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        in_dis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      endTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getTime</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (endTime </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> startTime </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">300</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> in_dis) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        callback.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(scope, </span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    });</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">NodeTouch</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">on</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">evt</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">scope</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> scopeObj;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x, y;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">scope) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      scopeObj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">._node;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      scopeObj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> scope;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (evt </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">tap</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">._node, callback, scope);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (evt </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">longtap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">longTap</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">._node, callback, scope);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">._node.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(evt, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">        callback.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(scope, </span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">      });</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">  window.</span><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">selector</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> node </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">querySelector</span><span style="color:#F6F6F4;">(selector);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (node) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NodeTouch</span><span style="color:#F6F6F4;">(node);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div></li></ol><h2 id="js-交换两个变量的值" tabindex="-1">JS 交换两个变量的值 <a class="header-anchor" href="#js-交换两个变量的值" aria-label="Permalink to &quot;JS 交换两个变量的值&quot;">​</a></h2><h3 id="通用变量" tabindex="-1">通用变量 <a class="header-anchor" href="#通用变量" aria-label="Permalink to &quot;通用变量&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">999</span><span style="color:#F6F6F4;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_1-首先把-a-的值存储到临时变量中-然后-b-赋值给-a-最后拿出临时变量中的-a-值赋给-b" tabindex="-1">1. 首先把 a 的值存储到临时变量中，然后 b 赋值给 a，最后拿出临时变量中的 a 值赋给 b <a class="header-anchor" href="#_1-首先把-a-的值存储到临时变量中-然后-b-赋值给-a-最后拿出临时变量中的-a-值赋给-b" aria-label="Permalink to &quot;1. 首先把 a 的值存储到临时变量中，然后 b 赋值给 a，最后拿出临时变量中的 a 值赋给 b&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a; </span><span style="color:#7B7F8B;">// t = 0</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// a = b = 1</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> t; </span><span style="color:#7B7F8B;">// b = t = 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-先改变另一个变量值-最后改变原修改的变量值" tabindex="-1">2. 先改变另一个变量值， 最后改变原修改的变量值 <a class="header-anchor" href="#_2-先改变另一个变量值-最后改变原修改的变量值" aria-label="Permalink to &quot;2. 先改变另一个变量值， 最后改变原修改的变量值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// a = 1</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// b = 0</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">-=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#7B7F8B;">// or</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">-=</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// a = a - b =-899</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// b = -899 + 999 = 100</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> a; </span><span style="color:#7B7F8B;">// a = 100 - -899 = 999</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-通过底层位运算来进行交换变量值" tabindex="-1">3. 通过底层位运算来进行交换变量值 <a class="header-anchor" href="#_3-通过底层位运算来进行交换变量值" aria-label="Permalink to &quot;3. 通过底层位运算来进行交换变量值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">^=</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// a = 899</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">^=</span><span style="color:#F6F6F4;"> a; </span><span style="color:#7B7F8B;">// b = 100</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">^=</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// a = 999</span></span>
<span class="line"><span style="color:#7B7F8B;">// or</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (b </span><span style="color:#F286C4;">^=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">^=</span><span style="color:#F6F6F4;"> b) </span><span style="color:#F286C4;">^</span><span style="color:#F6F6F4;"> a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_4-把-a-先变成了一个对象-这个对象保存着应该交换后的键值对-最后赋值搞定" tabindex="-1">4. 把 a 先变成了一个对象，这个对象保存着应该交换后的键值对，最后赋值搞定 <a class="header-anchor" href="#_4-把-a-先变成了一个对象-这个对象保存着应该交换后的键值对-最后赋值搞定" aria-label="Permalink to &quot;4. 把 a 先变成了一个对象，这个对象保存着应该交换后的键值对，最后赋值搞定&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> b,</span></span>
<span class="line"><span style="color:#F6F6F4;">  b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> a,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.b;</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5-把-a-先变成了一个数组" tabindex="-1">5. 把 a 先变成了一个数组 <a class="header-anchor" href="#_5-把-a-先变成了一个数组" aria-label="Permalink to &quot;5. 把 a 先变成了一个数组&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [a, b];</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_6" tabindex="-1">6 <a class="header-anchor" href="#_6" aria-label="Permalink to &quot;6&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [b, (b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a)][</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">// or</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [a, (a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b)][</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_7" tabindex="-1">7 <a class="header-anchor" href="#_7" aria-label="Permalink to &quot;7&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">[a, b] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [b, a];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="log-h6-1-7" tabindex="-1">log h6 1~7 <a class="header-anchor" href="#log-h6-1-7" aria-label="Permalink to &quot;log h6 1~7&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`a：</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">a</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">；b：</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">b</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 每个值都是 a：999；b：100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="js-数组去重" tabindex="-1">JS 数组去重 <a class="header-anchor" href="#js-数组去重" aria-label="Permalink to &quot;JS 数组去重&quot;">​</a></h2><h3 id="利用-es6-set-去重-es6-中最常用" tabindex="-1">利用 ES6 Set 去重（ES6 中最常用） <a class="header-anchor" href="#利用-es6-set-去重-es6-中最常用" aria-label="Permalink to &quot;利用 ES6 Set 去重（ES6 中最常用）&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Array.</span><span style="color:#62E884;">from</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(arr)); </span><span style="color:#7B7F8B;">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {}, {}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不考虑兼容性，此方法代码最少。缺点：无法去掉“{}”空对象</p><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><h3 id="利用-for-嵌套-for-然后-splice-去重" tabindex="-1">利用 for 嵌套 for，然后 splice 去重 <a class="header-anchor" href="#利用-for-嵌套-for-然后-splice-去重" aria-label="Permalink to &quot;利用 for 嵌套 for，然后 splice 去重&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (arr[i] </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> arr[j]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//第一个等同于第二个，splice方法删除第二个</span></span>
<span class="line"><span style="color:#F6F6F4;">        arr.</span><span style="color:#62E884;">splice</span><span style="color:#F6F6F4;">(j, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        j</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> arr;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#7B7F8B;">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, {…}, {…}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>外层循环元素，内层循环时比较值。值相同时，则删去这个值。缺点：NaN，{} 无法去重，null 会直接去掉</p><h3 id="利用-indexof-去重" tabindex="-1">利用 indexOf 去重 <a class="header-anchor" href="#利用-indexof-去重" aria-label="Permalink to &quot;利用 indexOf 去重&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">Array.</span><span style="color:#62E884;">isArray</span><span style="color:#F6F6F4;">(arr)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">type error!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> array </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (array.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(arr[i]) </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      array.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(arr[i]);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> array;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#7B7F8B;">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则 push 进数组。缺点：NaN，{} 无法去重</p><h3 id="利用-sort-去重" tabindex="-1">利用 sort()去重 <a class="header-anchor" href="#利用-sort-去重" aria-label="Permalink to &quot;利用 sort()去重&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">Array.</span><span style="color:#62E884;">isArray</span><span style="color:#F6F6F4;">(arr)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">type error!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arrry </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [arr[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]];</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (arr[i] </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> arr[i </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      arrry.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(arr[i]);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> arrry;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#7B7F8B;">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, {…}, {…}, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>利用 sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。缺点：NaN，{} 无法去重</p><h3 id="利用-hasownproperty-所有的都去重了" tabindex="-1">利用 hasOwnProperty[^所有的都去重了] <a class="header-anchor" href="#利用-hasownproperty-所有的都去重了" aria-label="Permalink to &quot;利用 hasOwnProperty[^所有的都去重了]&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {};</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> obj.</span><span style="color:#62E884;">hasOwnProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> item) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (obj[</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> item] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#7B7F8B;">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}]   //所有的都去重了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>asOwnProperty()</code> 方法用来检测一个属性是否是对象的自有属性，而不是从原型链继承的[^如果该属性是自有属性，那么返回 true，否则返回 false。注：不会检测对象的原型链，只会检测当前对象本身，只有当前对象本身存在该属性时才返回 true]</p><h3 id="利用-filter" tabindex="-1">利用 filter <a class="header-anchor" href="#利用-filter" aria-label="Permalink to &quot;利用 filter&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(item, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> index;</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#7B7F8B;">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, {…}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>缺点：NaN 直接去掉，{} 无法去重</p><h3 id="利用递归去重" tabindex="-1">利用递归去重 <a class="header-anchor" href="#利用递归去重" aria-label="Permalink to &quot;利用递归去重&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> array </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> array.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  array.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//排序后更加方便去重</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">loop</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (array[index] </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> array[index </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        array.</span><span style="color:#62E884;">splice</span><span style="color:#F6F6F4;">(index, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">loop</span><span style="color:#F6F6F4;">(index </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//递归loop，然后数组去重</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">loop</span><span style="color:#F6F6F4;">(len </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> array;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">unique</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#7B7F8B;">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, {…}, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, {…}, undefined]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>缺点：NaN，{} 无法去重</p><h3 id="new-set-arr" tabindex="-1">[...new Set(arr)] <a class="header-anchor" href="#new-set-arr" aria-label="Permalink to &quot;[...new Set(arr)]&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NaN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {}, {}];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">([</span><span style="color:#F286C4;">...</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">(arr)]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>优点：代码一句话。缺点：{} 无法去重</p><h3 id="数组对象根据字段去重" tabindex="-1">数组对象根据字段去重 <a class="header-anchor" href="#数组对象根据字段去重" aria-label="Permalink to &quot;数组对象根据字段去重&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">uniqueArrayObject</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [], </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (arr.length </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {};</span></span>
<span class="line"><span style="color:#F6F6F4;">  arr.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">map[item[key]]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      map[item[key]] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> item;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"><span style="color:#F6F6F4;">  list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Object.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> list;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="原生-ajax-请求教程" tabindex="-1">原生 AJAX 请求教程 <a class="header-anchor" href="#原生-ajax-请求教程" aria-label="Permalink to &quot;原生 AJAX 请求教程&quot;">​</a></h2><p><code>ajax</code> 即 <code>Asynchronous Javascript And XML，AJAX</code> 不是一门的新的语言，而是对现有持术的综合利用。本质是在 HTTP 协议的基础上以异步的方式与服务器进行通信.</p><p><strong>异步</strong>：指某段程序执行时不会阻塞其它程序执行，其表现形式为程序的执行顺序不依赖程序本身的书写顺序，相反则为同步。</p><h3 id="xmlhttprequest-对象" tabindex="-1">XMLHttpRequest 对象 <a class="header-anchor" href="#xmlhttprequest-对象" aria-label="Permalink to &quot;XMLHttpRequest 对象&quot;">​</a></h3><p>浏览器内建对象，用于在后台与服务器通信(交换数据) ，由此我们便可实现对网页的部分更新，而不是刷新整个页面。</p><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象： var xhr=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</p></blockquote><p>如需将请求发送到服务器，我们使用 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 和 <code>send()</code> 方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ajax_info.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>open(method,url,async)</td><td>规定请求的类型、URL 以及是否异步处理请求。 <strong>method</strong>：请求的类型；GET 或 POST <strong>url</strong>：文件在服务器上的位置 <strong>async</strong>：true（异步）或 false（同步）</td></tr><tr><td>send(string)</td><td>将请求发送到服务器。string：仅用于 POST 请求</td></tr></tbody></table><h3 id="get-请求" tabindex="-1">get 请求 <a class="header-anchor" href="#get-请求" aria-label="Permalink to &quot;get 请求&quot;">​</a></h3><p>get 请求参数需要放在 url 地址的参数中。并通过 urlencode 的方式传参，也就是<code>?</code>隔开 url 和参数，然后多个参数用<code>&amp;</code>连接，参数格式为：<code>key=val</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/ajax.php?fname=Henry&amp;lname=Ford</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="post-请求" tabindex="-1">post 请求 <a class="header-anchor" href="#post-请求" aria-label="Permalink to &quot;post 请求&quot;">​</a></h3><p>post 请求需要添加一个请求头，让后台知道我们请求的参数的格式，这样后台才能解析我们的数据。另外，传输的数据需要格式化到 send 方法中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/try/ajax/demo_post2.php</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">setRequestHeader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">application/x-www-form-urlencoded</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fname=Henry&amp;lname=Ford</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="接受数据并处理数据" tabindex="-1">接受数据并处理数据 <a class="header-anchor" href="#接受数据并处理数据" aria-label="Permalink to &quot;接受数据并处理数据&quot;">​</a></h3><p>XMLHttpRequest 对象的相关属性和事件</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>200: &quot;OK&quot;</td></tr><tr><td>responseText</td><td>获得字符串形式的响应数据。</td></tr><tr><td>responseXML</td><td>获得 XML 形式的响应数据。</td></tr><tr><td>readyState</td><td>存有 XMLHttpRequest 的状态。请求发送到后台后，状态会从 0 到 4 发生变化。 <strong>0</strong>: 请求未初始化 <strong>1</strong>: 服务器连接已建立 <strong>2</strong>: 请求已接收 <strong>3</strong>: 请求处理中 <strong>4</strong>: 请求已完成，且响应已就绪</td></tr><tr><td>onreadystatechange</td><td>每当 readyState 属性改变时，就会调用该函数。</td></tr></tbody></table><p>开发人员，可以通过监听 XMLHttpRequest 对象的 onreadystatechange 事件，在事件的回调函数中判断 readyState 的状态，可以帮助我们进行对象请求结果的判断处理。</p><h3 id="完整实例" tabindex="-1">完整实例 <a class="header-anchor" href="#完整实例" aria-label="Permalink to &quot;完整实例&quot;">​</a></h3><ul><li><strong>完整的 GET 请求例子</strong>：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">// get请求</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/api/user?id=333</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">onreadystatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (xhr.readyState </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> xhr.status </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><strong>完整的 POST 请求例子</strong>：</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/api/user</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// POST请求需要设置此参数</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">setRequestHeader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">application/x-www-form-urlencoded</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name=33&amp;ks=334</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">onreadystatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (xhr.readyState </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> xhr.status </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="封装原生-ajax-请求" tabindex="-1">封装原生 Ajax 请求 <a class="header-anchor" href="#封装原生-ajax-请求" aria-label="Permalink to &quot;封装原生 Ajax 请求&quot;">​</a></h3><p>封装 get 请求：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Ajax的Get请求辅助方法</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{String}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#7B7F8B;">  请求后台的地址</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{Function}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#7B7F8B;">  请求成之后，返回数据成功，并且调用此方法，这个方法接受一个参数就是后台返回的数据。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> undefined</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ajaxGet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, url, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  xhr.</span><span style="color:#62E884;">onreadystatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (xhr.readyState </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> xhr.status </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">callback</span><span style="color:#F6F6F4;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 调用</span></span>
<span class="line"><span style="color:#62E884;">ajaxGet</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/user.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>封装 post 请求：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ajaxPost</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, url, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  xhr.</span><span style="color:#62E884;">setRequestHeader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">application/x-www-form-urlencoded</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  xhr.</span><span style="color:#62E884;">onreadystatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (xhr.readyState </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> xhr.status </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">callback</span><span style="color:#F6F6F4;">(xhr.responseText);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 调用</span></span>
<span class="line"><span style="color:#62E884;">ajaxPost</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/api/user</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">id=9&amp;com=aicoder</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 后台返回的数据就是 字符串类型。要转成json，必须自己手动转换。</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(user.id);</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(user.com);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,138),e=[o];function r(t,c,F,i,y,u){return a(),n("div",null,e)}const d=s(p,[["render",r]]);export{b as __pageData,d as default};
