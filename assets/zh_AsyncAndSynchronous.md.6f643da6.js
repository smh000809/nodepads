import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.560b7abf.js";const u=JSON.parse('{"title":"AsyncAndSynchronous","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、同步加载与异步加载的形式","slug":"一、同步加载与异步加载的形式","link":"#一、同步加载与异步加载的形式","children":[]},{"level":2,"title":"1. 同步加载","slug":"_1-同步加载","link":"#_1-同步加载","children":[]},{"level":2,"title":"2. 常见异步加载（Script DOM Element）","slug":"_2-常见异步加载-script-dom-element","link":"#_2-常见异步加载-script-dom-element","children":[]},{"level":2,"title":"3. onload 时的异步加载","slug":"_3-onload-时的异步加载","link":"#_3-onload-时的异步加载","children":[]},{"level":2,"title":"4. 异步加载的其它方法","slug":"_4-异步加载的其它方法","link":"#_4-异步加载的其它方法","children":[]},{"level":2,"title":"二、async 和 defer 属性","slug":"二、async-和-defer-属性","link":"#二、async-和-defer-属性","children":[]},{"level":2,"title":"1. defer 属性","slug":"_1-defer-属性","link":"#_1-defer-属性","children":[]},{"level":2,"title":"2. async 属性","slug":"_2-async-属性","link":"#_2-async-属性","children":[]},{"level":2,"title":"三、延迟加载（lazy loading）","slug":"三、延迟加载-lazy-loading","link":"#三、延迟加载-lazy-loading","children":[]},{"level":2,"title":"四、script 的两阶段加载 与 延迟执行（lazy execution）","slug":"四、script-的两阶段加载-与-延迟执行-lazy-execution","link":"#四、script-的两阶段加载-与-延迟执行-lazy-execution","children":[]},{"level":2,"title":"五、JS 模块化管理","slug":"五、js-模块化管理","link":"#五、js-模块化管理","children":[]},{"level":2,"title":"六、JS 最佳实践","slug":"六、js-最佳实践","link":"#六、js-最佳实践","children":[]}],"relativePath":"zh/AsyncAndSynchronous.md","lastUpdated":1680248978000}'),p={name:"zh/AsyncAndSynchronous.md"},o=l(`<h1 id="asyncandsynchronous" tabindex="-1">AsyncAndSynchronous <a class="header-anchor" href="#asyncandsynchronous" aria-label="Permalink to &quot;AsyncAndSynchronous&quot;">​</a></h1><p>关键词：异步加载（async loading），延迟加载（lazy loading），延迟执行（lazy execution），async 属性， defer 属性</p><h2 id="一、同步加载与异步加载的形式" tabindex="-1">一、同步加载与异步加载的形式 <a class="header-anchor" href="#一、同步加载与异步加载的形式" aria-label="Permalink to &quot;一、同步加载与异步加载的形式&quot;">​</a></h2><h2 id="_1-同步加载" tabindex="-1">1. 同步加载 <a class="header-anchor" href="#_1-同步加载" aria-label="Permalink to &quot;1. 同步加载&quot;">​</a></h2><p>我们平时最常使用的就是这种同步加载形式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://yourdomain.com/script.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同步模式，又称阻塞模式，会阻止浏览器的后续处理，停止了后续的解析，因此停止了后续的文件加载（如图像）、渲染、代码执行。</p><p>js 之所以要同步执行，是因为 js 中可能有输出 document 内容、修改 dom、重定向等行为，所以默认同步执行才是安全的。</p><p>以前的一般建议是把<code>&lt;script&gt;</code>放在页面末尾<code>&lt;/body&gt;</code>之前，这样尽可能减少这种阻塞行为，而先让页面展示出来。</p><p>简单说：加载的网络 timeline 是瀑布模型，而异步加载的 timeline 是并发模型。</p><h2 id="_2-常见异步加载-script-dom-element" tabindex="-1">2. 常见异步加载（Script DOM Element） <a class="header-anchor" href="#_2-常见异步加载-script-dom-element" aria-label="Permalink to &quot;2. 常见异步加载（Script DOM Element）&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  s.type </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">text/javascript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  s.async </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  s.src </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">  x.parentNode.</span><span style="color:#62E884;">insertBefore</span><span style="color:#F6F6F4;">(s, x);</span></span>
<span class="line"><span style="color:#F6F6F4;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>异步加载又叫非阻塞，浏览器在下载执行 js 同时，还会继续进行后续页面的处理。</p><p>这种方法是在页面中<code>&lt;script&gt;</code>标签内，用 js 创建一个 script 元素并插入到 document 中。这样就做到了非阻塞的下载 js 代码。</p><p>async 属性是 HTML5 中新增的异步支持，见后文解释，加上好（不加也不影响）。</p><p>此方法被称为 Script DOM Element 法，不要求 js 同源。</p><p>将 js 代码包裹在匿名函数中并立即执行的方式是为了保护变量名泄露到外部可见，这是很常见的方式，尤其是在 js 库中被普遍使用。</p><p>例如 Google Analytics 和 Google+ Badge 都使用了这种异步加载代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> ga </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  ga.type </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">text/javascript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  ga.async </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  ga.src </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> document.location.protocol </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://ssl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.google-analytics.com/ga.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">  s.parentNode.</span><span style="color:#62E884;">insertBefore</span><span style="color:#F6F6F4;">(ga, s);</span></span>
<span class="line"><span style="color:#F6F6F4;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> po </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  po.type </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">text/javascript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  po.async </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  po.src </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://apis.google.com/js/plusone.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">  s.parentNode.</span><span style="color:#62E884;">insertBefore</span><span style="color:#F6F6F4;">(po, s);</span></span>
<span class="line"><span style="color:#F6F6F4;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但是，<strong>这种加载方式在加载执行完之前会阻止 onload 事件的触发</strong>，而现在很多页面的代码都在 onload 时还要执行额外的渲染工作等，所以还是会阻塞部分页面的初始化处理。</p><h2 id="_3-onload-时的异步加载" tabindex="-1">3. onload 时的异步加载 <a class="header-anchor" href="#_3-onload-时的异步加载" aria-label="Permalink to &quot;3. onload 时的异步加载&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">async_load</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.type </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">text/javascript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.async </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.src </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://yourdomain.com/script.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">    x.parentNode.</span><span style="color:#62E884;">insertBefore</span><span style="color:#F6F6F4;">(s, x);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (window.attachEvent) window.</span><span style="color:#62E884;">attachEvent</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">onload</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, async_load);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> window.</span><span style="color:#62E884;">addEventListener</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">load</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, async_load, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>它不是立即开始异步加载 js ，而是在 onload 时才开始异步加载。这样就解决了阻塞 onload 事件触发的问题。</p><p>补充：<strong>DOMContentLoaded 与 OnLoad 事件</strong></p><p>DOMContentLoaded : 页面(document)已经解析完成，页面中的 dom 元素已经可用。但是页面中引用的图片、subframe 可能还没有加载完。</p><p>OnLoad：页面的所有资源都加载完毕（包括图片）。浏览器的载入进度在这时才停止。</p><p>这两个时间点将页面加载的 timeline 分成了三个阶段。</p><h2 id="_4-异步加载的其它方法" tabindex="-1">4. 异步加载的其它方法 <a class="header-anchor" href="#_4-异步加载的其它方法" aria-label="Permalink to &quot;4. 异步加载的其它方法&quot;">​</a></h2><p>由于 Javascript 的<strong>动态特性</strong>，还有很多异步加载方法：</p><ul><li>XHR Eval</li><li>XHR Injection</li><li>Script in Iframe</li><li>Script Defer</li><li>document.write Script Tag</li><li>还有一种方法是用 setTimeout 延迟 0 秒 与 其它方法组合。</li></ul><p><strong>XHR Eval</strong> ：通过 ajax 获取 js 的内容，然后 eval 执行。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhrObj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getXHRObject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">xhrObj.</span><span style="color:#62E884;">onreadystatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (xhrObj.readyState </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">eval</span><span style="color:#F6F6F4;">(xhrObj.responseText);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">xhrObj.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">A.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">xhrObj.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Script in Ifram</strong>e：创建并插入一个 iframe 元素，让其异步执行 js 。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> iframe </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">iframe</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">document.body.</span><span style="color:#62E884;">appendChild</span><span style="color:#F6F6F4;">(iframe);</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> doc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> iframe.contentWindow.document;</span></span>
<span class="line"><span style="color:#F6F6F4;">doc.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">&lt;body onload=&quot;insertJS()&quot;&gt;</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">doc.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>GMail Mobile</strong>：页内 js 的内容被注释，所以不会执行，然后在需要的时候，获取 script 元素中 text 内容，去掉注释后 eval 执行。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">type</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">text/javascript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;">    var ...</span></span>
<span class="line"><span style="color:#7B7F8B;">    */</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详见参考资料中 2010 年的 Velocity 大会 Steve Souders 和淘宝的那两个讲义。</p><h2 id="二、async-和-defer-属性" tabindex="-1">二、async 和 defer 属性 <a class="header-anchor" href="#二、async-和-defer-属性" aria-label="Permalink to &quot;二、async 和 defer 属性&quot;">​</a></h2><h2 id="_1-defer-属性" tabindex="-1">1. defer 属性 <a class="header-anchor" href="#_1-defer-属性" aria-label="Permalink to &quot;1. defer 属性&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">defer</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>defer 属性声明这个脚本中将不会有 document.write 或 dom 修改。所有有 defer 的属性都会按照顺序执行。</p><p>浏览器将会并行下载 file.js 和其它有 defer 属性的 script，而不会阻塞页面后续处理。</p><h2 id="_2-async-属性" tabindex="-1">2. async 属性 <a class="header-anchor" href="#_2-async-属性" aria-label="Permalink to &quot;2. async 属性&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">async</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>async 属性是 HTML5 新增的。作用和 defer 类似，但是它将在下载后尽快执行，<strong>不能保证脚本会按顺序执行</strong>。它们将在 onload 事件之前完成。</p><p><strong>说明：</strong></p><ol><li>没有 async 属性，script 将立即获取（下载）并执行，然后才继续后面的处理，这期间阻塞了浏览器的后续处理。</li><li>如果有 async 属性，那么 script 将被异步下载并执行，同时浏览器继续后续的处理。</li><li>HTML4 中就有了 defer 属性，它提示浏览器这个 script 不会产生任何文档元素（没有 document.write），因此浏览器会继续后续处理和渲染。</li><li>如果没有 async 属性 但是有 defer 属性，那么 script 将在页面 parse 之后执行。</li><li>如果同时设置了二者，那么 defer 属性主要是为了让不支持 async 属性的老浏览器按照原来的 defer 方式处理，而不是同步方式。</li></ol><h2 id="三、延迟加载-lazy-loading" tabindex="-1">三、延迟加载（lazy loading） <a class="header-anchor" href="#三、延迟加载-lazy-loading" aria-label="Permalink to &quot;三、延迟加载（lazy loading）&quot;">​</a></h2><p>前面解决了异步加载（async loading）问题，再谈谈什么是延迟加载。</p><p>延迟加载：有些 js 代码并不是页面初始化的时候就立刻需要的，而稍后的某些情况才需要的。延迟加载就是一开始并不加载这些暂时不用的 js，而是在需要的时候或稍后再通过 js 的控制来异步加载。</p><p>也就是将 js 切分成许多模块，页面初始化时只加载需要立即执行的 js ，然后其它 js 的加载延迟到第一次需要用到的时候再加载。</p><p>特别是页面有大量不同的模块组成，很多可能暂时不用或根本就没用到。</p><p>就像图片的延迟加载，在图片出现在可视区域内时（在滚动条下拉）才加载显示图片。</p><h2 id="四、script-的两阶段加载-与-延迟执行-lazy-execution" tabindex="-1">四、script 的两阶段加载 与 延迟执行（lazy execution） <a class="header-anchor" href="#四、script-的两阶段加载-与-延迟执行-lazy-execution" aria-label="Permalink to &quot;四、script 的两阶段加载 与 延迟执行（lazy execution）&quot;">​</a></h2><p>JS 的加载其实是由两阶段组成：下载内容（download bytes）和执行（parse and execute）。</p><p>浏览器在下载完 js 的内容后就会立即对其解析和执行，不管是同步加载还是异步加载。</p><p>前面说的异步加载，解决的只是下载阶段的问题，但代码在下载后会立即执行。 而浏览器在解析执行 JS 阶段是阻塞任何操作的，这时的浏览器处于无响应状态。 我 们都知道通过网络下载 script 需要明显的时间，但容易忽略了第二阶段，解析和执行也是需要时间的。script 的解析和执行所花的时间比我们想象的要多，尤其是 script 很多很大的时候。有些是需要立刻执行，而有些则不需要（比如只是在展示某个界面或执行某个操作时才需要）。 这些 script 可以延迟执行，先异步下载缓存起来，但不立即执行，而是在第一次需要的时候执行一次。</p><h2 id="五、js-模块化管理" tabindex="-1">五、JS 模块化管理 <a class="header-anchor" href="#五、js-模块化管理" aria-label="Permalink to &quot;五、JS 模块化管理&quot;">​</a></h2><p>异步加载，需要将所有 js 内容按模块化的方式来切分组织，其中就存在依赖关系，而异步加载不保证执行顺序。</p><h2 id="六、js-最佳实践" tabindex="-1">六、JS 最佳实践 <a class="header-anchor" href="#六、js-最佳实践" aria-label="Permalink to &quot;六、JS 最佳实践&quot;">​</a></h2><ul><li><p>最小化 js 文件，利用压缩工具将其最小化，同时开启 http gzip 压缩。工具：</p></li><li><p>尽量不要放在<code>&lt;head&gt;</code> 中，尽量放在页面底部，最好是<code>&lt;/body&gt;</code>之前的位置</p></li><li><p>避免使用 document.write 方法</p></li><li><p>异步加载 js ，使用非阻塞方式，就是此文内容。</p></li><li><p>尽量不直接在页面元素上使用 Inline Javascript，如 onClick 。有利于统一维护和缓存处理。</p></li></ul>`,62),e=[o];function t(r,c,F,i,y,d){return a(),n("div",null,e)}const b=s(p,[["render",t]]);export{u as __pageData,b as default};
